From 81d36b422e13345e18a61451c2c807e10b1ea44c Mon Sep 17 00:00:00 2001
From: hsallrounder <hsallrounder@gmail.com>
Date: Mon, 30 Sep 2024 00:38:24 +0530
Subject: [PATCH 1/3] Task 2 Finished

---
 .idea/.gitignore                              |  3 ++
 .idea/forage-jpmc-swe-task-2.iml              | 14 ++++++++++
 .../inspectionProfiles/profiles_settings.xml  |  6 ++++
 .idea/misc.xml                                |  7 +++++
 .idea/modules.xml                             |  8 ++++++
 .idea/vcs.xml                                 |  6 ++++
 src/App.tsx                                   | 28 ++++++++++++++-----
 src/Graph.tsx                                 | 13 +++++++--
 8 files changed, 76 insertions(+), 9 deletions(-)
 create mode 100644 .idea/.gitignore
 create mode 100644 .idea/forage-jpmc-swe-task-2.iml
 create mode 100644 .idea/inspectionProfiles/profiles_settings.xml
 create mode 100644 .idea/misc.xml
 create mode 100644 .idea/modules.xml
 create mode 100644 .idea/vcs.xml

diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..26d3352
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
diff --git a/.idea/forage-jpmc-swe-task-2.iml b/.idea/forage-jpmc-swe-task-2.iml
new file mode 100644
index 0000000..a851b48
--- /dev/null
+++ b/.idea/forage-jpmc-swe-task-2.iml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/node_modules" />
+    </content>
+    <orderEntry type="jdk" jdkName="C:\ProgramData\Anaconda3" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
index 0000000..105ce2d
--- /dev/null
+++ b/.idea/inspectionProfiles/profiles_settings.xml
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..26952a5
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="C:\ProgramData\Anaconda3" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="C:\ProgramData\Anaconda3" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..2afa09c
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/forage-jpmc-swe-task-2.iml" filepath="$PROJECT_DIR$/.idea/forage-jpmc-swe-task-2.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..35eb1dd
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..6f09bb5 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data} />)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -59,7 +73,7 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => { this.getDataFromServer() }}>
             Start Streaming Data
           </button>
           <div className="Graph">
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..8ff2aca 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+          {"stock":"distinct count",
+          "top_ask_price":"avg",
+          "top_bid_price":"avg",
+          "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.36.1.windows.1


From 1b5763a82f6d1b3cf95eb19299f1904e01a36885 Mon Sep 17 00:00:00 2001
From: hsallrounder <hsallrounder@gmail.com>
Date: Mon, 30 Sep 2024 00:41:58 +0530
Subject: [PATCH 2/3] patch file

---
 multi_commit.patch | 361 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 361 insertions(+)
 create mode 100644 multi_commit.patch

diff --git a/multi_commit.patch b/multi_commit.patch
new file mode 100644
index 0000000..80ad3b9
--- /dev/null
+++ b/multi_commit.patch
@@ -0,0 +1,361 @@
+From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
+From: Joe Ferrer <joe@theforage.com>
+Date: Wed, 1 Mar 2023 00:45:20 +1100
+Subject: [PATCH 1/3] Move python files to datafeed dir
+
+---
+ requirements.txt => datafeed/requirements.txt | 0
+ server.py => datafeed/server3.py              | 0
+ datafeed/test.csv                             | 0
+ 3 files changed, 0 insertions(+), 0 deletions(-)
+ rename requirements.txt => datafeed/requirements.txt (100%)
+ rename server.py => datafeed/server3.py (100%)
+ create mode 100644 datafeed/test.csv
+
+diff --git a/requirements.txt b/datafeed/requirements.txt
+similarity index 100%
+rename from requirements.txt
+rename to datafeed/requirements.txt
+diff --git a/server.py b/datafeed/server3.py
+similarity index 100%
+rename from server.py
+rename to datafeed/server3.py
+diff --git a/datafeed/test.csv b/datafeed/test.csv
+new file mode 100644
+index 0000000..e69de29
+-- 
+2.36.1.windows.1
+
+
+From 338824fa6e950f75bad2068da67400fee2cb57f8 Mon Sep 17 00:00:00 2001
+From: hsallrounder <hsallrounder@gmail.com>
+Date: Mon, 30 Sep 2024 00:38:24 +0530
+Subject: [PATCH 2/3] Task 2 Finished
+
+---
+ src/App.tsx   | 28 +++++++++++++++++++++-------
+ src/Graph.tsx | 13 +++++++++++--
+ 2 files changed, 32 insertions(+), 9 deletions(-)
+
+diff --git a/src/App.tsx b/src/App.tsx
+index 0728518..6f09bb5 100755
+--- a/src/App.tsx
++++ b/src/App.tsx
+@@ -8,6 +8,7 @@ import './App.css';
+  */
+ interface IState {
+   data: ServerRespond[],
++  showGraph: boolean,
+ }
+ 
+ /**
+@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
+       // data saves the server responds.
+       // We use this state to parse data down to the child element (Graph) as element property
+       data: [],
++      showGraph: false,
+     };
+   }
+ 
+@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
+    * Render Graph react component with state.data parse as property data
+    */
+   renderGraph() {
+-    return (<Graph data={this.state.data}/>)
++    if (this.state.showGraph) {
++      return (<Graph data={this.state.data} />)
++    }
+   }
+ 
+   /**
+    * Get new data from server and update the state with the new data
+    */
+   getDataFromServer() {
+-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+-      // Update the state by creating a new array of data that consists of
+-      // Previous data in the state and the new data from server
+-      this.setState({ data: [...this.state.data, ...serverResponds] });
+-    });
++    let x = 0;
++    const interval = setInterval(() => {
++      DataStreamer.getData((serverResponds: ServerRespond[]) => {
++        // Update the state by creating a new array of data that consists of
++        // Previous data in the state and the new data from server
++        this.setState({
++          data: serverResponds,
++          showGraph: true,
++        });
++      });
++      x++;
++      if (x > 1000) {
++        clearInterval(interval);
++      }
++    }, 100);
+   }
+ 
+   /**
+@@ -59,7 +73,7 @@ class App extends Component<{}, IState> {
+             // As part of your task, update the getDataFromServer() function
+             // to keep requesting the data every 100ms until the app is closed
+             // or the server does not return anymore data.
+-            onClick={() => {this.getDataFromServer()}}>
++            onClick={() => { this.getDataFromServer() }}>
+             Start Streaming Data
+           </button>
+           <div className="Graph">
+diff --git a/src/Graph.tsx b/src/Graph.tsx
+index 3b2a7da..8ff2aca 100644
+--- a/src/Graph.tsx
++++ b/src/Graph.tsx
+@@ -14,7 +14,7 @@ interface IProps {
+  * Perspective library adds load to HTMLElement prototype.
+  * This interface acts as a wrapper for Typescript compiler.
+  */
+-interface PerspectiveViewerElement {
++interface PerspectiveViewerElement extends HTMLElement {
+   load: (table: Table) => void,
+ }
+ 
+@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
+ 
+   componentDidMount() {
+     // Get element to attach the table from the DOM.
+-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+ 
+     const schema = {
+       stock: 'string',
+@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
+ 
+       // Add more Perspective configurations here.
+       elem.load(this.table);
++      elem.setAttribute('view', 'y_line');
++      elem.setAttribute('column-pivots', '["stock"]');
++      elem.setAttribute('row-pivots', '["timestamp"]');
++      elem.setAttribute('columns', '["top_ask_price"]');
++      elem.setAttribute('aggregates', `
++          {"stock":"distinct count",
++          "top_ask_price":"avg",
++          "top_bid_price":"avg",
++          "timestamp":"distinct count"}`);
+     }
+   }
+ 
+-- 
+2.36.1.windows.1
+
+
+From 81d36b422e13345e18a61451c2c807e10b1ea44c Mon Sep 17 00:00:00 2001
+From: hsallrounder <hsallrounder@gmail.com>
+Date: Mon, 30 Sep 2024 00:38:24 +0530
+Subject: [PATCH 3/3] Task 2 Finished
+
+---
+ .idea/.gitignore                              |  3 ++
+ .idea/forage-jpmc-swe-task-2.iml              | 14 ++++++++++
+ .../inspectionProfiles/profiles_settings.xml  |  6 ++++
+ .idea/misc.xml                                |  7 +++++
+ .idea/modules.xml                             |  8 ++++++
+ .idea/vcs.xml                                 |  6 ++++
+ src/App.tsx                                   | 28 ++++++++++++++-----
+ src/Graph.tsx                                 | 13 +++++++--
+ 8 files changed, 76 insertions(+), 9 deletions(-)
+ create mode 100644 .idea/.gitignore
+ create mode 100644 .idea/forage-jpmc-swe-task-2.iml
+ create mode 100644 .idea/inspectionProfiles/profiles_settings.xml
+ create mode 100644 .idea/misc.xml
+ create mode 100644 .idea/modules.xml
+ create mode 100644 .idea/vcs.xml
+
+diff --git a/.idea/.gitignore b/.idea/.gitignore
+new file mode 100644
+index 0000000..26d3352
+--- /dev/null
++++ b/.idea/.gitignore
+@@ -0,0 +1,3 @@
++# Default ignored files
++/shelf/
++/workspace.xml
+diff --git a/.idea/forage-jpmc-swe-task-2.iml b/.idea/forage-jpmc-swe-task-2.iml
+new file mode 100644
+index 0000000..a851b48
+--- /dev/null
++++ b/.idea/forage-jpmc-swe-task-2.iml
+@@ -0,0 +1,14 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<module type="PYTHON_MODULE" version="4">
++  <component name="NewModuleRootManager">
++    <content url="file://$MODULE_DIR$">
++      <excludeFolder url="file://$MODULE_DIR$/node_modules" />
++    </content>
++    <orderEntry type="jdk" jdkName="C:\ProgramData\Anaconda3" jdkType="Python SDK" />
++    <orderEntry type="sourceFolder" forTests="false" />
++  </component>
++  <component name="PyDocumentationSettings">
++    <option name="format" value="PLAIN" />
++    <option name="myDocStringFormat" value="Plain" />
++  </component>
++</module>
+\ No newline at end of file
+diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
+new file mode 100644
+index 0000000..105ce2d
+--- /dev/null
++++ b/.idea/inspectionProfiles/profiles_settings.xml
+@@ -0,0 +1,6 @@
++<component name="InspectionProjectProfileManager">
++  <settings>
++    <option name="USE_PROJECT_PROFILE" value="false" />
++    <version value="1.0" />
++  </settings>
++</component>
+\ No newline at end of file
+diff --git a/.idea/misc.xml b/.idea/misc.xml
+new file mode 100644
+index 0000000..26952a5
+--- /dev/null
++++ b/.idea/misc.xml
+@@ -0,0 +1,7 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="Black">
++    <option name="sdkName" value="C:\ProgramData\Anaconda3" />
++  </component>
++  <component name="ProjectRootManager" version="2" project-jdk-name="C:\ProgramData\Anaconda3" project-jdk-type="Python SDK" />
++</project>
+\ No newline at end of file
+diff --git a/.idea/modules.xml b/.idea/modules.xml
+new file mode 100644
+index 0000000..2afa09c
+--- /dev/null
++++ b/.idea/modules.xml
+@@ -0,0 +1,8 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="ProjectModuleManager">
++    <modules>
++      <module fileurl="file://$PROJECT_DIR$/.idea/forage-jpmc-swe-task-2.iml" filepath="$PROJECT_DIR$/.idea/forage-jpmc-swe-task-2.iml" />
++    </modules>
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/.idea/vcs.xml b/.idea/vcs.xml
+new file mode 100644
+index 0000000..35eb1dd
+--- /dev/null
++++ b/.idea/vcs.xml
+@@ -0,0 +1,6 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="VcsDirectoryMappings">
++    <mapping directory="" vcs="Git" />
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/src/App.tsx b/src/App.tsx
+index 0728518..6f09bb5 100755
+--- a/src/App.tsx
++++ b/src/App.tsx
+@@ -8,6 +8,7 @@ import './App.css';
+  */
+ interface IState {
+   data: ServerRespond[],
++  showGraph: boolean,
+ }
+ 
+ /**
+@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
+       // data saves the server responds.
+       // We use this state to parse data down to the child element (Graph) as element property
+       data: [],
++      showGraph: false,
+     };
+   }
+ 
+@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
+    * Render Graph react component with state.data parse as property data
+    */
+   renderGraph() {
+-    return (<Graph data={this.state.data}/>)
++    if (this.state.showGraph) {
++      return (<Graph data={this.state.data} />)
++    }
+   }
+ 
+   /**
+    * Get new data from server and update the state with the new data
+    */
+   getDataFromServer() {
+-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+-      // Update the state by creating a new array of data that consists of
+-      // Previous data in the state and the new data from server
+-      this.setState({ data: [...this.state.data, ...serverResponds] });
+-    });
++    let x = 0;
++    const interval = setInterval(() => {
++      DataStreamer.getData((serverResponds: ServerRespond[]) => {
++        // Update the state by creating a new array of data that consists of
++        // Previous data in the state and the new data from server
++        this.setState({
++          data: serverResponds,
++          showGraph: true,
++        });
++      });
++      x++;
++      if (x > 1000) {
++        clearInterval(interval);
++      }
++    }, 100);
+   }
+ 
+   /**
+@@ -59,7 +73,7 @@ class App extends Component<{}, IState> {
+             // As part of your task, update the getDataFromServer() function
+             // to keep requesting the data every 100ms until the app is closed
+             // or the server does not return anymore data.
+-            onClick={() => {this.getDataFromServer()}}>
++            onClick={() => { this.getDataFromServer() }}>
+             Start Streaming Data
+           </button>
+           <div className="Graph">
+diff --git a/src/Graph.tsx b/src/Graph.tsx
+index 3b2a7da..8ff2aca 100644
+--- a/src/Graph.tsx
++++ b/src/Graph.tsx
+@@ -14,7 +14,7 @@ interface IProps {
+  * Perspective library adds load to HTMLElement prototype.
+  * This interface acts as a wrapper for Typescript compiler.
+  */
+-interface PerspectiveViewerElement {
++interface PerspectiveViewerElement extends HTMLElement {
+   load: (table: Table) => void,
+ }
+ 
+@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
+ 
+   componentDidMount() {
+     // Get element to attach the table from the DOM.
+-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+ 
+     const schema = {
+       stock: 'string',
+@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
+ 
+       // Add more Perspective configurations here.
+       elem.load(this.table);
++      elem.setAttribute('view', 'y_line');
++      elem.setAttribute('column-pivots', '["stock"]');
++      elem.setAttribute('row-pivots', '["timestamp"]');
++      elem.setAttribute('columns', '["top_ask_price"]');
++      elem.setAttribute('aggregates', `
++          {"stock":"distinct count",
++          "top_ask_price":"avg",
++          "top_bid_price":"avg",
++          "timestamp":"distinct count"}`);
+     }
+   }
+ 
+-- 
+2.36.1.windows.1
+
-- 
2.36.1.windows.1


From 7e105fb1c06041d86e9903f4e99d6cba13e07a06 Mon Sep 17 00:00:00 2001
From: hsallrounder <hsallrounder@gmail.com>
Date: Mon, 30 Sep 2024 00:58:12 +0530
Subject: [PATCH 3/3] patch file

---
 multi_commit.patch | 387 ++++++++++++++++++++++++++++++++++++++++++++-
 src/App.tsx        |   8 +
 src/Graph.tsx      |  15 ++
 3 files changed, 407 insertions(+), 3 deletions(-)

diff --git a/multi_commit.patch b/multi_commit.patch
index 80ad3b9..23df569 100644
--- a/multi_commit.patch
+++ b/multi_commit.patch
@@ -1,7 +1,7 @@
 From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
 From: Joe Ferrer <joe@theforage.com>
 Date: Wed, 1 Mar 2023 00:45:20 +1100
-Subject: [PATCH 1/3] Move python files to datafeed dir
+Subject: [PATCH 1/4] Move python files to datafeed dir
 
 ---
  requirements.txt => datafeed/requirements.txt | 0
@@ -30,7 +30,7 @@ index 0000000..e69de29
 From 338824fa6e950f75bad2068da67400fee2cb57f8 Mon Sep 17 00:00:00 2001
 From: hsallrounder <hsallrounder@gmail.com>
 Date: Mon, 30 Sep 2024 00:38:24 +0530
-Subject: [PATCH 2/3] Task 2 Finished
+Subject: [PATCH 2/4] Task 2 Finished
 
 ---
  src/App.tsx   | 28 +++++++++++++++++++++-------
@@ -148,7 +148,7 @@ index 3b2a7da..8ff2aca 100644
 From 81d36b422e13345e18a61451c2c807e10b1ea44c Mon Sep 17 00:00:00 2001
 From: hsallrounder <hsallrounder@gmail.com>
 Date: Mon, 30 Sep 2024 00:38:24 +0530
-Subject: [PATCH 3/3] Task 2 Finished
+Subject: [PATCH 3/4] Task 2 Finished
 
 ---
  .idea/.gitignore                              |  3 ++
@@ -359,3 +359,384 @@ index 3b2a7da..8ff2aca 100644
 -- 
 2.36.1.windows.1
 
+
+From 1b5763a82f6d1b3cf95eb19299f1904e01a36885 Mon Sep 17 00:00:00 2001
+From: hsallrounder <hsallrounder@gmail.com>
+Date: Mon, 30 Sep 2024 00:41:58 +0530
+Subject: [PATCH 4/4] patch file
+
+---
+ multi_commit.patch | 361 +++++++++++++++++++++++++++++++++++++++++++++
+ 1 file changed, 361 insertions(+)
+ create mode 100644 multi_commit.patch
+
+diff --git a/multi_commit.patch b/multi_commit.patch
+new file mode 100644
+index 0000000..80ad3b9
+--- /dev/null
++++ b/multi_commit.patch
+@@ -0,0 +1,361 @@
++From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
++From: Joe Ferrer <joe@theforage.com>
++Date: Wed, 1 Mar 2023 00:45:20 +1100
++Subject: [PATCH 1/3] Move python files to datafeed dir
++
++---
++ requirements.txt => datafeed/requirements.txt | 0
++ server.py => datafeed/server3.py              | 0
++ datafeed/test.csv                             | 0
++ 3 files changed, 0 insertions(+), 0 deletions(-)
++ rename requirements.txt => datafeed/requirements.txt (100%)
++ rename server.py => datafeed/server3.py (100%)
++ create mode 100644 datafeed/test.csv
++
++diff --git a/requirements.txt b/datafeed/requirements.txt
++similarity index 100%
++rename from requirements.txt
++rename to datafeed/requirements.txt
++diff --git a/server.py b/datafeed/server3.py
++similarity index 100%
++rename from server.py
++rename to datafeed/server3.py
++diff --git a/datafeed/test.csv b/datafeed/test.csv
++new file mode 100644
++index 0000000..e69de29
++-- 
++2.36.1.windows.1
++
++
++From 338824fa6e950f75bad2068da67400fee2cb57f8 Mon Sep 17 00:00:00 2001
++From: hsallrounder <hsallrounder@gmail.com>
++Date: Mon, 30 Sep 2024 00:38:24 +0530
++Subject: [PATCH 2/3] Task 2 Finished
++
++---
++ src/App.tsx   | 28 +++++++++++++++++++++-------
++ src/Graph.tsx | 13 +++++++++++--
++ 2 files changed, 32 insertions(+), 9 deletions(-)
++
++diff --git a/src/App.tsx b/src/App.tsx
++index 0728518..6f09bb5 100755
++--- a/src/App.tsx
+++++ b/src/App.tsx
++@@ -8,6 +8,7 @@ import './App.css';
++  */
++ interface IState {
++   data: ServerRespond[],
+++  showGraph: boolean,
++ }
++ 
++ /**
++@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
++       // data saves the server responds.
++       // We use this state to parse data down to the child element (Graph) as element property
++       data: [],
+++      showGraph: false,
++     };
++   }
++ 
++@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
++    * Render Graph react component with state.data parse as property data
++    */
++   renderGraph() {
++-    return (<Graph data={this.state.data}/>)
+++    if (this.state.showGraph) {
+++      return (<Graph data={this.state.data} />)
+++    }
++   }
++ 
++   /**
++    * Get new data from server and update the state with the new data
++    */
++   getDataFromServer() {
++-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
++-      // Update the state by creating a new array of data that consists of
++-      // Previous data in the state and the new data from server
++-      this.setState({ data: [...this.state.data, ...serverResponds] });
++-    });
+++    let x = 0;
+++    const interval = setInterval(() => {
+++      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+++        // Update the state by creating a new array of data that consists of
+++        // Previous data in the state and the new data from server
+++        this.setState({
+++          data: serverResponds,
+++          showGraph: true,
+++        });
+++      });
+++      x++;
+++      if (x > 1000) {
+++        clearInterval(interval);
+++      }
+++    }, 100);
++   }
++ 
++   /**
++@@ -59,7 +73,7 @@ class App extends Component<{}, IState> {
++             // As part of your task, update the getDataFromServer() function
++             // to keep requesting the data every 100ms until the app is closed
++             // or the server does not return anymore data.
++-            onClick={() => {this.getDataFromServer()}}>
+++            onClick={() => { this.getDataFromServer() }}>
++             Start Streaming Data
++           </button>
++           <div className="Graph">
++diff --git a/src/Graph.tsx b/src/Graph.tsx
++index 3b2a7da..8ff2aca 100644
++--- a/src/Graph.tsx
+++++ b/src/Graph.tsx
++@@ -14,7 +14,7 @@ interface IProps {
++  * Perspective library adds load to HTMLElement prototype.
++  * This interface acts as a wrapper for Typescript compiler.
++  */
++-interface PerspectiveViewerElement {
+++interface PerspectiveViewerElement extends HTMLElement {
++   load: (table: Table) => void,
++ }
++ 
++@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
++ 
++   componentDidMount() {
++     // Get element to attach the table from the DOM.
++-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+++    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++ 
++     const schema = {
++       stock: 'string',
++@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
++ 
++       // Add more Perspective configurations here.
++       elem.load(this.table);
+++      elem.setAttribute('view', 'y_line');
+++      elem.setAttribute('column-pivots', '["stock"]');
+++      elem.setAttribute('row-pivots', '["timestamp"]');
+++      elem.setAttribute('columns', '["top_ask_price"]');
+++      elem.setAttribute('aggregates', `
+++          {"stock":"distinct count",
+++          "top_ask_price":"avg",
+++          "top_bid_price":"avg",
+++          "timestamp":"distinct count"}`);
++     }
++   }
++ 
++-- 
++2.36.1.windows.1
++
++
++From 81d36b422e13345e18a61451c2c807e10b1ea44c Mon Sep 17 00:00:00 2001
++From: hsallrounder <hsallrounder@gmail.com>
++Date: Mon, 30 Sep 2024 00:38:24 +0530
++Subject: [PATCH 3/3] Task 2 Finished
++
++---
++ .idea/.gitignore                              |  3 ++
++ .idea/forage-jpmc-swe-task-2.iml              | 14 ++++++++++
++ .../inspectionProfiles/profiles_settings.xml  |  6 ++++
++ .idea/misc.xml                                |  7 +++++
++ .idea/modules.xml                             |  8 ++++++
++ .idea/vcs.xml                                 |  6 ++++
++ src/App.tsx                                   | 28 ++++++++++++++-----
++ src/Graph.tsx                                 | 13 +++++++--
++ 8 files changed, 76 insertions(+), 9 deletions(-)
++ create mode 100644 .idea/.gitignore
++ create mode 100644 .idea/forage-jpmc-swe-task-2.iml
++ create mode 100644 .idea/inspectionProfiles/profiles_settings.xml
++ create mode 100644 .idea/misc.xml
++ create mode 100644 .idea/modules.xml
++ create mode 100644 .idea/vcs.xml
++
++diff --git a/.idea/.gitignore b/.idea/.gitignore
++new file mode 100644
++index 0000000..26d3352
++--- /dev/null
+++++ b/.idea/.gitignore
++@@ -0,0 +1,3 @@
+++# Default ignored files
+++/shelf/
+++/workspace.xml
++diff --git a/.idea/forage-jpmc-swe-task-2.iml b/.idea/forage-jpmc-swe-task-2.iml
++new file mode 100644
++index 0000000..a851b48
++--- /dev/null
+++++ b/.idea/forage-jpmc-swe-task-2.iml
++@@ -0,0 +1,14 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<module type="PYTHON_MODULE" version="4">
+++  <component name="NewModuleRootManager">
+++    <content url="file://$MODULE_DIR$">
+++      <excludeFolder url="file://$MODULE_DIR$/node_modules" />
+++    </content>
+++    <orderEntry type="jdk" jdkName="C:\ProgramData\Anaconda3" jdkType="Python SDK" />
+++    <orderEntry type="sourceFolder" forTests="false" />
+++  </component>
+++  <component name="PyDocumentationSettings">
+++    <option name="format" value="PLAIN" />
+++    <option name="myDocStringFormat" value="Plain" />
+++  </component>
+++</module>
++\ No newline at end of file
++diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
++new file mode 100644
++index 0000000..105ce2d
++--- /dev/null
+++++ b/.idea/inspectionProfiles/profiles_settings.xml
++@@ -0,0 +1,6 @@
+++<component name="InspectionProjectProfileManager">
+++  <settings>
+++    <option name="USE_PROJECT_PROFILE" value="false" />
+++    <version value="1.0" />
+++  </settings>
+++</component>
++\ No newline at end of file
++diff --git a/.idea/misc.xml b/.idea/misc.xml
++new file mode 100644
++index 0000000..26952a5
++--- /dev/null
+++++ b/.idea/misc.xml
++@@ -0,0 +1,7 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<project version="4">
+++  <component name="Black">
+++    <option name="sdkName" value="C:\ProgramData\Anaconda3" />
+++  </component>
+++  <component name="ProjectRootManager" version="2" project-jdk-name="C:\ProgramData\Anaconda3" project-jdk-type="Python SDK" />
+++</project>
++\ No newline at end of file
++diff --git a/.idea/modules.xml b/.idea/modules.xml
++new file mode 100644
++index 0000000..2afa09c
++--- /dev/null
+++++ b/.idea/modules.xml
++@@ -0,0 +1,8 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<project version="4">
+++  <component name="ProjectModuleManager">
+++    <modules>
+++      <module fileurl="file://$PROJECT_DIR$/.idea/forage-jpmc-swe-task-2.iml" filepath="$PROJECT_DIR$/.idea/forage-jpmc-swe-task-2.iml" />
+++    </modules>
+++  </component>
+++</project>
++\ No newline at end of file
++diff --git a/.idea/vcs.xml b/.idea/vcs.xml
++new file mode 100644
++index 0000000..35eb1dd
++--- /dev/null
+++++ b/.idea/vcs.xml
++@@ -0,0 +1,6 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<project version="4">
+++  <component name="VcsDirectoryMappings">
+++    <mapping directory="" vcs="Git" />
+++  </component>
+++</project>
++\ No newline at end of file
++diff --git a/src/App.tsx b/src/App.tsx
++index 0728518..6f09bb5 100755
++--- a/src/App.tsx
+++++ b/src/App.tsx
++@@ -8,6 +8,7 @@ import './App.css';
++  */
++ interface IState {
++   data: ServerRespond[],
+++  showGraph: boolean,
++ }
++ 
++ /**
++@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
++       // data saves the server responds.
++       // We use this state to parse data down to the child element (Graph) as element property
++       data: [],
+++      showGraph: false,
++     };
++   }
++ 
++@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
++    * Render Graph react component with state.data parse as property data
++    */
++   renderGraph() {
++-    return (<Graph data={this.state.data}/>)
+++    if (this.state.showGraph) {
+++      return (<Graph data={this.state.data} />)
+++    }
++   }
++ 
++   /**
++    * Get new data from server and update the state with the new data
++    */
++   getDataFromServer() {
++-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
++-      // Update the state by creating a new array of data that consists of
++-      // Previous data in the state and the new data from server
++-      this.setState({ data: [...this.state.data, ...serverResponds] });
++-    });
+++    let x = 0;
+++    const interval = setInterval(() => {
+++      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+++        // Update the state by creating a new array of data that consists of
+++        // Previous data in the state and the new data from server
+++        this.setState({
+++          data: serverResponds,
+++          showGraph: true,
+++        });
+++      });
+++      x++;
+++      if (x > 1000) {
+++        clearInterval(interval);
+++      }
+++    }, 100);
++   }
++ 
++   /**
++@@ -59,7 +73,7 @@ class App extends Component<{}, IState> {
++             // As part of your task, update the getDataFromServer() function
++             // to keep requesting the data every 100ms until the app is closed
++             // or the server does not return anymore data.
++-            onClick={() => {this.getDataFromServer()}}>
+++            onClick={() => { this.getDataFromServer() }}>
++             Start Streaming Data
++           </button>
++           <div className="Graph">
++diff --git a/src/Graph.tsx b/src/Graph.tsx
++index 3b2a7da..8ff2aca 100644
++--- a/src/Graph.tsx
+++++ b/src/Graph.tsx
++@@ -14,7 +14,7 @@ interface IProps {
++  * Perspective library adds load to HTMLElement prototype.
++  * This interface acts as a wrapper for Typescript compiler.
++  */
++-interface PerspectiveViewerElement {
+++interface PerspectiveViewerElement extends HTMLElement {
++   load: (table: Table) => void,
++ }
++ 
++@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
++ 
++   componentDidMount() {
++     // Get element to attach the table from the DOM.
++-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+++    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++ 
++     const schema = {
++       stock: 'string',
++@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
++ 
++       // Add more Perspective configurations here.
++       elem.load(this.table);
+++      elem.setAttribute('view', 'y_line');
+++      elem.setAttribute('column-pivots', '["stock"]');
+++      elem.setAttribute('row-pivots', '["timestamp"]');
+++      elem.setAttribute('columns', '["top_ask_price"]');
+++      elem.setAttribute('aggregates', `
+++          {"stock":"distinct count",
+++          "top_ask_price":"avg",
+++          "top_bid_price":"avg",
+++          "timestamp":"distinct count"}`);
++     }
++   }
++ 
++-- 
++2.36.1.windows.1
++
+-- 
+2.36.1.windows.1
+
diff --git a/src/App.tsx b/src/App.tsx
index 6f09bb5..2011a52 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  // Add a new property 'showGraph' of type 'boolean' to the IState interface in App.tsx
   showGraph: boolean,
 }
 
@@ -23,6 +24,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      // In the constructor of the App component, initialize 'showGraph' as false to keep the graph hidden initially
+      // The graph will be displayed when the user clicks 'Start Streaming Data'
       showGraph: false,
     };
   }
@@ -31,6 +34,8 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    // Update the 'renderGraph' method to include a condition that checks if 'showGraph' is true
+    // The graph will only render when the 'showGraph' property in the App's state is true
     if (this.state.showGraph) {
       return (<Graph data={this.state.data} />)
     }
@@ -38,6 +43,9 @@ class App extends Component<{}, IState> {
 
   /**
    * Get new data from server and update the state with the new data
+   * Modify the 'getDataFromServer' method to continuously fetch data from the server using 'setInterval'
+   * Use a guard value to stop the interval when necessary, allowing continuous data streaming until stopped
+   * Ensure the method contacts the server at regular intervals to update the graph dynamically
    */
   getDataFromServer() {
     let x = 0;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 8ff2aca..c6a0166 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -13,6 +13,9 @@ interface IProps {
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
+ * In 'Graph.tsx', enable 'PerspectiveViewerElement' to behave like an HTMLElement
+ * Achieve this by extending the 'HTMLElement' class from the 'PerspectiveViewerElement' interface
+ * This allows the Graph component to react to state changes appropriately
  */
 interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
@@ -30,6 +33,12 @@ class Graph extends Component<IProps, {}> {
     return React.createElement('perspective-viewer');
   }
 
+  /**
+   * Modify the 'componentDidMount' method in 'Graph.tsx'
+   * The method runs after the component has been rendered to the DOM
+   * Simplify the 'const elem' definition by assigning it directly to 'document.getElementsByTagName'
+   * This works since 'PerspectiveViewerElement' now extends 'HTMLElement'
+   */
   componentDidMount() {
     // Get element to attach the table from the DOM.
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
@@ -49,6 +58,12 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+
+      /**
+      * Add the necessary attributes to the PerspectiveViewerElement in 'Graph.tsx'
+      * The attributes to add are: 'view', 'column-pivots', 'row-pivots', 'columns', and 'aggregates'
+      * Ensure the final element includes these attributes for proper rendering of the graph component
+      */
       elem.setAttribute('view', 'y_line');
       elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-- 
2.36.1.windows.1

